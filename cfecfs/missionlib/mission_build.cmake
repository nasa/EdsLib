###########################################################
#
# EDS CFE mission build setup
#
# This file is evaluated as part of the "prepare" stage
# and can be used to set up prerequisites for the build,
# such as generating header files
#
###########################################################

#
# When including this script from a top-level mission build,
# also generate the required build system files.  These are
# the same across all CPUs so there is no reason to repeat this
# in the arch-specific builds.
#
function (edslib_find_sources)

  # Now that a complete list of mission dependencies is generated,
  # check for the presence of additional special files under each app subdir:
  #  - Electronic Data Sheet XML source files under eds/ subdirectory
  #  - Electronic Data Sheet toolchain plugin scripts also under eds/ subdirectory
  #  - The "functional-test" subdir will be installed to the host functional test dir
  #  - The "ui" subdir will be installed to the UI pages install dir
  file(GLOB_RECURSE MISSION_EDS_FILELIST FOLLOW_SYMLINKS
    ${MISSION_DEFS}/eds/*.xml
  )
  file(GLOB_RECURSE MISSION_EDS_SCRIPTLIST FOLLOW_SYMLINKS
    ${MISSION_DEFS}/eds/*.lua
    ${MISSION_SOURCE_DIR}/tools/eds/tool/scripts/*.lua
  )
  foreach(APP ${MISSION_DEPS})
    set(APPSRC ${${APP}_MISSION_DIR})
    if (IS_DIRECTORY ${APPSRC}/functional-test AND DEFINED FT_INSTALL_SUBDIR)
      install(DIRECTORY ${APPSRC}/functional-test/ DESTINATION ${FT_INSTALL_SUBDIR})
    endif (IS_DIRECTORY ${APPSRC}/functional-test AND DEFINED FT_INSTALL_SUBDIR)

    if (IS_DIRECTORY ${APPSRC}/ui AND DEFINED UI_INSTALL_SUBDIR)
      install(DIRECTORY ${APPSRC}/ui/ DESTINATION ${UI_INSTALL_SUBDIR}/pages)
    endif()

    if (IS_DIRECTORY ${APPSRC}/eds)
        file(GLOB_RECURSE APPXML FOLLOW_SYMLINKS ${APPSRC}/eds/*.xml)
        file(GLOB_RECURSE APPSCRIPTS FOLLOW_SYMLINKS ${APPSRC}/eds/*.lua)
        list(APPEND MISSION_EDS_FILELIST ${APPXML})
        list(APPEND MISSION_EDS_SCRIPTLIST ${APPSCRIPTS})
        unset(APPXML)
        unset(APPSCRIPTS)
    endif()
  endforeach(APP ${MISSION_DEPS})

  # EDS toolchain plugin scripts may have ordering dependencies between them,
  # so the assembled set of available scripts should be sorted by its filename
  # This allows a numeric prefix (NN-) to be prepended in cases where
  # the execution order is a concern (similar to UNIX SysV init system approach)
  set(EDS_SCRIPT_BASENAMES)
  foreach(SCRIPTFILE ${MISSION_EDS_SCRIPTLIST})
    get_filename_component(BASENAME ${SCRIPTFILE} NAME_WE)
    set(${BASENAME}_SCRIPT_LOCATION ${SCRIPTFILE})
    list(APPEND EDS_SCRIPT_BASENAMES ${BASENAME})
  endforeach(SCRIPTFILE ${MISSION_EDS_SCRIPTLIST})
  list(SORT EDS_SCRIPT_BASENAMES)
  set(MISSION_EDS_SCRIPTLIST)
  foreach(BASENAME ${EDS_SCRIPT_BASENAMES})
    list(APPEND MISSION_EDS_SCRIPTLIST ${${BASENAME}_SCRIPT_LOCATION})
    unset(${BASENAME}_SCRIPT_LOCATION)
  endforeach(BASENAME ${EDS_SCRIPT_BASENAMES})
  unset(EDS_SCRIPT_BASENAMES)

  # Export the set of EDS source files
  configure_file(
      ${missionlib_MISSION_DIR}/cmake/edstool-sources.d.in
      ${CMAKE_BINARY_DIR}/obj/edstool-sources.d
  )

endfunction (edslib_find_sources)

# Capture the set of EDS source files present in the build tree
edslib_find_sources()

# Generate a list of CPU targets
set(TGTNAMELIST "/* Automatically generated from targets.cmake - do not edit this file directly */\n\n")
if(DEFINED MISSION_CPUNAMES)
    foreach(CPUNAME ${MISSION_CPUNAMES})
        set(TGTNAMELIST "${TGTNAMELIST}DEFINE_TGTNAME(${CPUNAME})\n")
    endforeach()
else()
    set(TGTID 1)
    while(DEFINED TGT${TGTID}_NAME)
        set(TGTNAMELIST "${TGTNAMELIST}DEFINE_TGTNAME(${TGT${TGTID}_NAME})\n")
        math(EXPR TGTID "${TGTID} + 1")
    endwhile()
endif()

# Update the output only if different - avoid unnecessary rebuilds
file(WRITE ${MISSION_BINARY_DIR}/inc/cfe_mission_tgtnames.inc.tmp ${TGTNAMELIST})
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${MISSION_BINARY_DIR}/inc/cfe_mission_tgtnames.inc.tmp
    ${MISSION_BINARY_DIR}/inc/cfe_mission_tgtnames.inc
)
file(REMOVE ${MISSION_BINARY_DIR}/inc/cfe_mission_tgtnames.inc.tmp)

# At the mission scope the "edstool-execute" builds the full set of artifacts
add_custom_target(edstool-execute
    COMMAND "\$(MAKE)"
        EDSTOOL=$<TARGET_FILE:sedstool>
        -I ${CMAKE_BINARY_DIR}/obj
        -f ${missionlib_MISSION_DIR}/cmake/edstool-execute-mission.mk
        all
    WORKING_DIRECTORY
        ${MISSION_BINARY_DIR}
    DEPENDS
        sedstool
)

# Executing the EDS tool per above custom commands is hooked into
# the pre-build process so it is done before any CPU builds.
add_dependencies(mission-prebuild edstool-execute)

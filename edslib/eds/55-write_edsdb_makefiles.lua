--
-- LEW-19710-1, CCSDS SOIS Electronic Data Sheet Implementation
--
-- Copyright (c) 2020 United States Government as represented by
-- the Administrator of the National Aeronautics and Space Administration.
-- All Rights Reserved.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--    http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--


-- -------------------------------------------------------------------------
-- Lua Script to actually _build_ the edslib generated source files
--
-- After this script completes, "SEDS.edslib" should be a fully-functioning
-- set of Lua bindings for the EDS objects just as it would be in an external tool,
-- and thus it can be used to instantiate C versions of EDS-described objects that
-- will be compatible with future Flight Software code.
-- -------------------------------------------------------------------------

local output
local objdir = SEDS.get_define("OBJDIR") or "obj"
local makefilename = SEDS.to_filename("db_objects.mk")
local libtypes = { ".a", ".so", ".obj" }
local dbobjects = { "_datatypedb_impl.o", "_displaydb_impl.o" }
local global_sym_prefix = SEDS.get_define("MISSION_NAME")
global_sym_prefix = global_sym_prefix and string.upper(global_sym_prefix) or "EDS"

-- -------------------------------------
-- Simple helper to get the object names
local function get_objnames(prefix,suffix,n,q)
  local result = ""
  for _,t in ipairs(suffix) do
    result = result .. string.format("%s/%s%s ",prefix,SEDS.to_filename(n,q),t)
  end
  return result
end

-- -------------------------------------
-- Simple helper to write a makefile rule to an output file
-- They are written on separate lines to improve readability of the generated file
local function write_rule(output,targets,dependencies)
  output:write(string.format("%s:\\", targets))
  output:write(string.format("    %s",dependencies))
  output:add_whitespace(1)
end


-- --------------------------------------------------------------------
-- Step 1: generate a C source file for db "summary information"
-- This is basically a master table which contains references back to
-- all database objects generated by previous scripts
-- --------------------------------------------------------------------
output = SEDS.output_open(SEDS.to_filename("summary_impl.c"))

output:write(string.format("#include \"edslib_database_types.h\""))
output:write(string.format("#include \"%s\"",SEDS.to_filename("master_index.h")))
output:add_whitespace(1)

output:write(string.format("extern EdsLib_DataTypeDB_t %s_DATATYPEDB_APPTBL[];",global_sym_prefix))
output:write(string.format("extern EdsLib_DisplayDB_t %s_DISPLAYDB_APPTBL[];",global_sym_prefix))

output:section_marker("EDS mission object that incorporates all generated elements")
output:write(string.format("const EdsLib_DatabaseObject_t %s_DATABASE =",global_sym_prefix))
output:start_group("{")
output:write(string.format(".AppTableSize = %s_MAX_INDEX,",global_sym_prefix))
output:write(string.format(".DataTypeDB_Table = %s_DATATYPEDB_APPTBL,",global_sym_prefix))
output:write(string.format(".DisplayDB_Table = %s_DISPLAYDB_APPTBL,",global_sym_prefix))
output:end_group("};")

SEDS.output_close(output)


-- --------------------------------------------------------------------
-- Step 3: generate a makefile for the actual EDS database
-- This is a set dependencies between the library objects (.a and .so files)
-- and the sources that go into each one.  The pattern rules from the previous
-- step will be used to formulate actual build commands.
-- --------------------------------------------------------------------
output = SEDS.output_open(makefilename)

output:write("include $(O)/edstool-buildenv.d $(wildcard $(O)/*.d)")
output:write("include $(EDSLIB_SOURCE_DIR)/cmake/dbobj_patternrules.mk")
output:add_whitespace(1)

output:section_marker("Mission Summary Object")
write_rule(output,
  get_objnames("$(O)",libtypes, "db"),
  get_objnames("$(O)",dbobjects,"") .. string.format("$(O)/%s", SEDS.to_filename("summary_impl.o"))
)

output:section_marker("Database objects from EDS files")
for ds in SEDS.root:iterate_children(SEDS.basenode_filter) do
  output:write(string.format("# Targets from %s",ds.xml_filename))
  write_rule(output,
    get_objnames("$(O)", libtypes, "", ds.name) .. get_objnames("$(O)", libtypes, "db"),
    get_objnames("$(O)", dbobjects, "", ds.name)
  )
  output:add_whitespace(1)
end

SEDS.output_close(output)
